npm i --global yarn //instalamos yarn

yarn init -y //iniciamos nosso projeto

yarn add express //instalamos express

npm install //comando para garantir que todos os recursos globais do Node estão presentes

yarn add typescript -D //instalando o TS para melhorar a sintaxe dentro da aplicação e previnir erros.

yarn tsc --init //adicionando o TS no nosso projeto

yarn add ts-node-dev -D //adicionando um plugin para nos dar mais agilidade, vai reiniciar o server a cada modificação.

Criamos o script abaixo no ambiente de desenvolvimento para inicializar nossa aplicação. Comando: yarn dev
  "scripts": {
    "dev":"ts-node-dev src/server.ts"
  },

yarn add @types/express -D //o express vai conseguir entender o typescript.

yarn add knex //instalando o KNEX. Framework para auziliar na geração de scripts SQL e pode ser usado com qualquer banco de dados.

yarn add mysql2. //instalando o banco de dados.

npm install -g knex //instalando o knex no Node.

knex migrate:make create_tab_cadastro //criando nossa primeira migration

yarn knex migrate:latest //vai executar as última iterações no banco, vai migrar para o banco.

APÓS ISSO, EXCLUÍMOS O KNEX E VAMOS UTILIZAR OUTRO FRAMEWORK. DELETAMOS TUDO QUE TINHA RELAÇÃO COM O KNEX E VAMOS UTILIZAR O TYPEORM.

npm install --global typeorm //instalamos o typeORM de maneira global

yarn add typeorm //adicionamos o typeorm no nosso projeto.

yarn add reflect-metadata //maior compatibilidade.

"scripts": {
    "typeorm": "ts-node-dev node_modules/typeorm/cli.js"
  },
//criamos este script para rodar nossas migrations, inserir elas no DB. comando: yarn typeorm migration:run

typeorm migration:create -n CreateTabCadastro //Gerando a nossa migrations para configurar a tabela cadastro.

TIVEMOS QUE MUDAR O STRICT PARA FALSE DENTRO DO ARQUIVO TSCONFIG.JSON

TIVEMOS QUE DESCOMENTAR AS DUAS LINHAS ABAIXO NO TSCONFIG.JSON:
"experimentalDecorators": true,
"emitDecoratorMetadata": true,